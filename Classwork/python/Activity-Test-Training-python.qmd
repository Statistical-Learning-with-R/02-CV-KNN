---
title: "Test and Training Error"
author: "YOUR NAME HERE"
format: 
  html:
    code-fold: true
    code-line-numbers: true
    code-tools: true
    self-contained: true
editor: visual
execute:
  message: false
jupyter: python3
---

## Setup

Declare your libraries:

```{python}
#| label: libraries-py
#| include: false
import pandas as pd
import numpy as np
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
```

## Code from slides

```{python}
ins = pd.read_csv("https://www.dropbox.com/s/bocjjyo1ehr5auz/insurance_costs_1.csv?dl=1")
ins.head()
```

```{python}
poly_mod_1 = np.polyfit(x = ins["bmi"], y = ins[["charges"]], deg = 1)
poly_mod_20 = np.polyfit(x = ins["bmi"], y = ins[["charges"]], deg = 20)
```

```{python}
ins['preds_1'] = np.polyval(poly_mod_1, x = ins["bmi"])
ins['preds_20'] = np.polyval(poly_mod_20, x = ins["bmi"])
```

```{python}
print(poly_mod_1)
print(poly_mod_20)
```

```{python}
absError = ins['preds_1'] - ins['charges']
SE = np.square(absError) # squared errors
MSE = np.mean(SE) # mean squared errors
np.sqrt(MSE) # Root Mean Squared Error, RMSE

absError = ins['preds_20'] - ins['charges']
SE = np.square(absError) # squared errors
MSE = np.mean(SE) # mean squared errors
np.sqrt(MSE)
```

```{python}
import random
random.seed(190498)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(ins['bmi'], ins['charges'])
```

```{python}
poly_mod_1 = np.polyfit(x = x_train, y = y_train, deg = 1)
poly_mod_20 = np.polyfit(x = x_train, y = y_train, deg = 20)

test_preds_1 = np.polyval(poly_mod_1, x = x_test)
test_preds_20 = np.polyval(poly_mod_20, x = x_test)
```

```{python}
absError = test_preds_1 - y_test
SE = np.square(absError) # squared errors
MSE = np.mean(SE) # mean squared errors
np.sqrt(MSE) # Root Mean Squared Error, RMSE

absError = test_preds_20 - y_test
SE = np.square(absError) # squared errors
MSE = np.mean(SE) # mean squared errors
np.sqrt(MSE)
```

## Your turn

Suppose you want to fit a regression that predicts `charges` from `age` and `bmi`.

Consider four models:

-   `age` and `bmi` both have polynomial 1
-   `age` has polynomial 1, `bmi` has polynomial 2
-   `age` has polynomial 2, `bmi` has polynomial 1
-   `age` and `bmi` both have polynomial 2

(No interactions term for any model.)

Which model is best according to the **adjusted R-squared** on the training data?

Which model is best according to the **MSE** of the **test** data?
